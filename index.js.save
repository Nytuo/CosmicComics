/*This file is part of Cosmic-comics.

Cosmic-Comics is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Cosmic-Comics is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cosmic-Comics.  If not, see <https://www.gnu.org/licenses/>.*/



WARNING THIS A SAVE OF THE OLD INDEX.JS WHICH PROVIDE ANOTHER DISPLAY (BUT NOW INCOMPATIBLE)



const { dialog, shell } = require("electron");
const { Menu, MenuItem } = remote;
const fs = require("fs");
const patha = require("path");
const ValidatedExtension = [
  "cbr",
  "cbz",
  "pdf",
  "zip",
  "7z",
  "cb7",
  "tar",
  "cbt",
  "rar",
];
const SevenBin = require("7zip-bin");
const Seven = require("node-7z");
const Path27Zip = SevenBin.path7za;
var Unrar = require("unrar");
const { electron } = require("process");
const { get } = require("https");
var imagelink = "null";
var nabc = 0;
var dirnamew = __dirname.replaceAll("\\", "/");
var listOfImages = [];
var whichname = "";
var whichpath = "";
var folderRootPath = [];
var favonly = false;
var readonly = false;
var unreadonly = false;
var readingonly = false;
var popper = require("@popperjs/core");
var bootstrap = require("bootstrap");
var tooltipTriggerList = [].slice.call(
  document.querySelectorAll('[data-bs-toggle="tooltip"]')
);
var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
  return new bootstrap.Tooltip(tooltipTriggerEl);
});
const parentfolder1 = require("path").dirname(__dirname);
const parentfolder2 = require("path").dirname(parentfolder1);
const parentfolder3 = require("path").dirname(parentfolder2);
const app = remote.app;
var CosmicComicsData = app.getPath("userData") + "/CosmicComics_data";
var GetAllIMG = false;
const DRPC = require("discord-rpc");
const { error } = require("console");
const ClientID = "870352308062539796";
const rpc = new DRPC.Client({ transport: "ipc" });
const startTimestamp = new Date();
function lang(langg) {
  var file = fs.readFileSync(__dirname + "/languages/" + langg + ".json");
  var JSONRes = JSON.parse(file);
  return JSONRes[0];
}
function GetLANGINFO() {
  var configFile = fs.readFileSync(CosmicComicsData + "/config.json");
  var parsedJSON = JSON.parse(configFile);
  var configlang = GetElFromInforPath("language", parsedJSON);
  return lang(configlang);
}
var language = GetLANGINFO();

function setActivity() {
  rpc.setActivity({
    details: language["in_menu"],
    state: language["navinfolder"],
    startTimestamp,
    largeImageKey: "logo",
    largeImageText: "   ",
    smallImageKey: "   ",
    smallImageText: "   ",
    instance: false,
  });
}
rpc.on("ready", () => {
  setActivity();
  setInterval(setActivity(), 15e3);
});
rpc.login({ clientId: ClientID }).catch(console.error);
document.getElementById("version").innerHTML =
  language["version"] + ": " + remote.app.getVersion();
var getFolderJSON = getfolderfromJSON(CosmicComicsData + "/config.json");
if (getFolderJSON != null && getFolderJSON != "") {
  document.getElementById("overlaymsg").innerHTML =
    language["overlaymsg_refolder"];
  setTimeout(() => {
    document.getElementById("overlaymsg").innerHTML =
      language["overlaymsg_piracy"];
  }, 5000);
  var listfolder = [];
  listfolder.push(getFolderJSON);
  folderRootPath.push(listfolder[0]);
  openFolderRoutine(listfolder);
}

function openFolder() {
  let result = remote.dialog.showOpenDialogSync({
    properties: ["openDirectory"],
  });
  if (result) {
    document.getElementById("overlaymsg").innerHTML =
      language["overlaymsg_opening"];
    setTimeout(() => {
      document.getElementById("overlaymsg").innerHTML =
        language["overlaymsg_takecare"];
    }, 5000);
    folderRootPath.push(result[0]);
    ModifyJSONFileForPath(CosmicComicsData + "/config.json", "path", result[0]);
    openFolderRoutine(result);
  }
}
function obliviate() {
  ModifyJSONFileForPath(CosmicComicsData + "/config.json", "path", "");
  window.location.reload();
}
function changeUpdateProvider() {
  ModifyJSONFileForPath(
    CosmicComicsData + "/config.json",
    "update_provider",
    ""
  );
  Toastifycation(
    "Done, You will be asked next time you launch the app!",
    "#00C33C"
  );
}
function ModifyJSONFileForPath(json, tomod, mod) {
  //check si obj exist pour remplacer valeur
  var configFile = fs.readFileSync(json);
  var config = JSON.parse(configFile);
  for (var i in config) {
    config[i][tomod] = mod;
  }
  var configJSON = JSON.stringify(config, null, 2);
  fs.writeFileSync(json, configJSON);
}
function GetElFromInforPath(search, info) {
  for (var i in info[0]) {
    if (i == search) {
      return info[0][i];
    }
  }
  return null;
}
function refreshFolder() {
  window.location.href = window.location.href;
}
function getfolderfromJSON(json) {
  var configFile = fs.readFileSync(json);
  var parsedJSON = JSON.parse(configFile);
  return GetElFromInforPath("path", parsedJSON);
}
function ContinueAfterExtrImg(
  FolderResults,
  result,
  favonly,
  readonly,
  unreadonly,
  readingonly
) {
  if (GetAllIMG == true) {
    loadContents(
      FolderResults,
      result[0],
      favonly,
      readonly,
      unreadonly,
      readingonly
    );
  } else if (GetAllIMG == null) {
    alert(language["err_img"]);
  } else {
    setTimeout(() => {
      ContinueAfterExtrImg(
        FolderResults,
        result,
        favonly,
        readonly,
        unreadonly,
        readingonly
      );
    }, 500);
  }
}
function openFolderRoutine(folder) {
  document.getElementById("tutotxt").style.display = "none";
  document.getElementById("opnfld").onclick = "";
  document.getElementById("opnfld").setAttribute("disabled", "");
  document.getElementById("overlay").style.display = "block";
  setTimeout(() => {
    var result = folder;
    if (result) {
      var FolderRes = DetectFilesAndFolders(result[0]);
      /*document.getElementById("p").innerHTML =
        "Location: " + result + " -- Total: " + FolderRes.length;*/
      //lancer le unzip des premiers de chaque
      var AllFolderRes = DetectAllFilesAndFolders(result[0]);
      AllFolderResults = CheckCorrectExt4File(AllFolderRes, ValidatedExtension);
      GetTheFirstImageOfComicsByFolder(AllFolderResults);
      FolderResults = CheckCorrectExt4File(FolderRes, ValidatedExtension);
      FolderResults.forEach((file) => {
        var stat = fs.statSync(file);
        var name = patha.basename(file);
        var realname = name.split(".");
        realname = realname[0];
        var shortname = GetTheName(realname);
        var Info = GetInfoFromJSON(
          CosmicComicsData + "/ListOfComics.json",
          shortname
        );
        if (
          GetElFromInfo("read", Info) == "undefined" ||
          GetElFromInfo("read", Info) == null
        ) {
          if (stat.isDirectory()) {
            var obj = {
              fullname: realname,
              name: shortname,
              read: false,
              reading: false,
              unread: true,
              favorite: false,
              last_page: 0,
              folder: true,
              note: -1,
            };

            SaveInfoToJSON(obj, CosmicComicsData + "/ListOfComics.json");
          } else {
            var obj = {
              fullname: realname,
              name: shortname,
              read: false,
              reading: false,
              unread: true,
              favorite: false,
              last_page: 0,
              folder: false,
              note: -1,
            };

            SaveInfoToJSON(obj, CosmicComicsData + "/ListOfComics.json");
          }
        }
      });
      ContinueAfterExtrImg(
        FolderResults,
        result,
        favonly,
        readonly,
        unreadonly,
        readingonly
      );
    } else {
      document
        .getElementById("opnfld")
        .setAttribute("onclick", "openFolderDialog()");
      document.getElementById("opnfld").removeAttribute("disabled");
      document.getElementById("overlay").style.display = "none";
    }
  }, 500);
}
function CheckCorrectExt4File(folderRes, validedextension) {
  FolderResults = [];
  folderRes.forEach((file) => {
    var stat = fs.statSync(file);
    var ext = "";
    if (!stat.isDirectory()) {
      ext = file.split(".").pop();
      ext = ext.toLowerCase();
    }
    if (validedextension.includes(ext)) {
      FolderResults.push(file);
    } else {
      if (stat.isDirectory()) {
        FolderResults.push(file);
      } else {
      }
    }
  });
  return FolderResults;
}

function ModifyJSONFile(json, tomod, mod, name) {
  //check si obj exist pour remplacer valeur
  var configFile = fs.readFileSync(json);
  var config = JSON.parse(configFile);
  for (var i in config) {
    for (var j in config[i]) {
      if (config[i][j] == name) {
        console.log(config);
        config[i][tomod] = mod;
        console.log(config);
      }
    }
  }
  var configJSON = JSON.stringify(config, null, 2);
  fs.writeFileSync(json, configJSON);
}
function SaveInfoToJSON(obj, json) {
  //check si obj exist pour remplacer valeur
  var configFile = fs.readFileSync(json);
  var config = JSON.parse(configFile);
  config.push(obj);
  var configJSON = JSON.stringify(config, null, 2);
  fs.writeFileSync(json, configJSON);
}
function GetInfoFromJSON(json, name) {
  var data = fs.readFileSync(json);
  var info = JSON.parse(data);
  var Info = GetInfo("name", info, name);
  return Info;
}
function GetInfo(search, info, name) {
  for (var i in info) {
    for (var j in info[i]) {
      if (j == search) {
        if (name == info[i][j]) {
          return info[i];
        }
      }
    }
  }
  return null;
}
function GetElFromInfo(search, info) {
  for (var i in info) {
    if (i == search) {
      return info[i];
    }
  }
  return null;
}
function RightClick(object = HTMLAnchorElement, lepath) {
  whichname = object.style.backgroundImage;
  whichname = whichname.split("/");
  whichname = whichname[whichname.length - 2];
  whichpath = lepath;
}
function loadContents(
  FolderRes,
  root,
  favonly,
  readonly,
  unreadonly,
  readingonly
) {
  var n = 0;
  listOfImages = [];
  document.getElementById("overlay").style.display = "block";
  FolderResults.forEach((file) => {
    var stat = fs.statSync(file);
    var name = patha.basename(file);
    var realname = name.split(".");
    realname = realname[0];
    var shortname = GetTheName(realname);
    var Info = GetInfoFromJSON(
      CosmicComicsData + "/ListOfComics.json",
      shortname
    );
    if (
      GetElFromInfo("read", Info) == "undefined" ||
      GetElFromInfo("read", Info) == null
    ) {
      if (stat.isDirectory()) {
        var obj = {
          fullname: realname,
          name: shortname,
          read: false,
          reading: false,
          unread: true,
          favorite: false,
          last_page: 0,
          folder: true,
          note: -1,
        };

        SaveInfoToJSON(obj, CosmicComicsData + "/ListOfComics.json");
      } else {
        var obj = {
          fullname: realname,
          name: shortname,
          read: false,
          reading: false,
          unread: true,
          favorite: false,
          last_page: 0,
          folder: false,
          note: -1,
        };

        SaveInfoToJSON(obj, CosmicComicsData + "/ListOfComics.json");
      }
    }
  });
  FolderRes.forEach((path,index) => {
    var stat = fs.statSync(path);
    var name = patha.basename(path);
    var realname = name.split(".");
    realname = realname[0];
    var shortname = GetTheName(realname);
    var Info = GetInfoFromJSON(
      CosmicComicsData + "/ListOfComics.json",
      shortname
    );
    var readed = GetElFromInfo("read", Info);
    var reading = GetElFromInfo("reading", Info);
    var favorite = GetElFromInfo("favorite", Info);
    if (stat.isDirectory()) {
      var node = document.createTextNode(realname);
      invertedPath = path.replaceAll("\\", "/");
      if (fs.existsSync(invertedPath + "/folder.cosmic")) {
        imagelink = invertedPath + "/folder.cosmic";
        console.log(imagelink);
      } else {
        imagelink = "Images/folderDefault.png";
      }
    } else if (
      fs.existsSync(CosmicComicsData + "/FirstImageOfAll/" + shortname)
    ) {
      var node = document.createTextNode(realname);
      var FIOA = fs.readdirSync(
        CosmicComicsData + "/FirstImageOfAll/" + shortname
      );
      var CCDN = CosmicComicsData.replaceAll("\\", "/");
      invertedPath = path.replaceAll("\\", "/");
      if (fs.existsSync(invertedPath + "/" + realname + ".cosmic")) {
        imagelink = invertedPath + "/" + realname + ".cosmic";
        console.log(imagelink);
      } else {
        if (FIOA.length == 0) {
          imagelink = "Images/fileDefault.png";
        } else {
          imagelink = CCDN + "/FirstImageOfAll/" + shortname + "/" + FIOA[0];
        }
      }
    } else {
      console.log(shortname + "/" + shortname + ".jpg not found");
      var node = document.createTextNode(realname);
      imagelink = "Images/fileDefault.png";
    }

listOfImages.push(imagelink);
    //Setting Card Div
    const carddiv = document.createElement("div");
    carddiv.className = "card"
    carddiv.setAttribute("data-effect","blur")
    //button card_save
    const buttonfav = document.createElement("button")
    buttonfav.className = "card__save js-fav"
    buttonfav.type = "button"
    //icon
    const favicon = document.createElement("i")
    favicon.className = "material-icons"
    favicon.innerHTML = "favorite"
    buttonfav.appendChild(favicon)
    carddiv.appendChild(buttonfav)
    //button card__close
    const button_unread = document.createElement("button")
    button_unread.className = "card__close js-unread"
    button_unread.type = "button"
    //icon
    const unread_icon = document.createElement("i")
    unread_icon.className = "material-icons"
    unread_icon.innerHTML = "close"
    button_unread.appendChild(unread_icon)
    carddiv.appendChild(button_unread)
    //button card__reading
    const button_reading = document.createElement("button")
    button_reading.className = "card__reading js-reading"
    button_reading.type = "button"
    //icon
    const reading_icon = document.createElement("i")
    reading_icon.className = "material-icons"
    reading_icon.innerHTML = "auto_stories"
    button_reading.appendChild(reading_icon)
    carddiv.appendChild(button_reading)
    //button card__read
    const button_read = document.createElement("button")
    button_read.className = "card__read js-read"
    button_read.type = "button"
    //ico
    const read_ion = document.createElement("i")
    read_ion.className = "material-icons"
    read_ion.innerHTML = "auto_stories"
    button_read.appendChild(read_ion)
    carddiv.appendChild(button_read)
    //figure card__image
    const cardimage = document.createElement("figure")
    const bgimg = document.createElement("img")

    cardimage.appendChild(mettreimg)
    carddiv.appendChild(cardimage)
    //card__body
    const bodycard = document.createElement("div")
    bodycard.className = "card__body"
    //button play
    const playbtn = document.createElement("button")
    playbtn.className = "card__play js-play"
    playbtn.type = "button"
    const playarr = document.createElement("i")
    playarr.className = "material-icons"
    playarr.innerHTML = "play_arrow"
    playbtn.appendChild(playarr)
    const pcard_bio = document.createElement("p")
    pcard_bio.className = "card__bio"
    pcard_bio.style = "text-align: center;"
    pcard_bio.innerHTML = mettretxt
    bodycard.appendChild(playbtn)
    bodycard.appendChild(pcard_bio)
    carddiv.appendChild(bodycard)
    carddiv.id = "id" + n;
    









    /*const aContainer = document.createElement("a");
    const spanContainer = document.createElement("span");
    spanContainer.style = "transform: translateZ(20px);color:white;";*/
    if (stat.isDirectory()) {
      const imgNode = document.createElement("img");
      imgNode.src = "";
      imgNode.style = "padding-top: 330px";
      aContainer.appendChild(imgNode);
      spanContainer.style =
        "padding-top: 20px;font-size: 30px;line-height: 30px;";
    } else if (readed) {
      const RibbonNode = document.createElement("img");
      RibbonNode.src = "Images/vertribbon.png";
      RibbonNode.style = "padding-left: 207px";
      aContainer.appendChild(RibbonNode);
    } else if (reading) {
      const RibbonNode = document.createElement("img");
      RibbonNode.src = "Images/orangeribbon.png";
      RibbonNode.style = "padding-left: 207px";
      aContainer.appendChild(RibbonNode);
    } else {
      const RibbonNode = document.createElement("img");
      RibbonNode.style = "padding-top: 87px";
      aContainer.appendChild(RibbonNode);
    }
    if (favorite) {
      const fav = document.createElement("img");
      fav.src = "Images/outline_favorite_black_24dp.png";
      fav.style =
        "padding-top:310px;padding-left:240px;display:flex;position: relative";
      aContainer.appendChild(fav);
    } else if (stat.isDirectory()) {
      const fav = document.createElement("img");
      fav.style = "padding-top:110px; display:flex";
      aContainer.appendChild(fav);
    } else {
      const fav = document.createElement("img");
      fav.style = "padding-top:360px; display:flex";
      aContainer.appendChild(fav);
    }
    //#region ratingCSS
    const ratingcss = document.createElement("div")
    ratingcss.className = "rating-css hover-effect";
    const ratinginput1= document.createElement("input")
    ratinginput1.type = "radio"
    ratinginput1.value = "1"
    ratinginput1.id = "rating3-1_"+index
    ratinginput1.name = "Rating_"+shortname
    ratinginput1.setAttribute("checked", "")
    ratinginput1.checked = true;
    ratinginput1.onchange = SetForRating1(shortname)
    const label1 = document.createElement("label")
    label1.setAttribute("for","rating3-1_"+index)
    label1.className = "mdi mdi-star"
    const ratinginput2= document.createElement("input")
    ratinginput2.type = "radio"
    ratinginput2.value = "2"
    ratinginput2.id = "rating3-2_"+index
    ratinginput2.name = "Rating_"+shortname
    ratinginput2.onchange = SetForRating2(shortname)
    const label2 = document.createElement("label")
    label2.setAttribute("for","rating3-2_"+index)
    label2.className = "mdi mdi-star"
    const ratinginput3= document.createElement("input")
    ratinginput3.type = "radio"
    ratinginput3.value = "3"
    ratinginput3.id = "rating3-3_"+index
    ratinginput3.name = "Rating_"+shortname
    ratinginput3.onchange = SetForRating3(shortname)
    const label3 = document.createElement("label")
    label3.setAttribute("for","rating3-3_"+index)
    label3.className = "mdi mdi-star"
    const ratinginput4= document.createElement("input")
    ratinginput4.type = "radio"
    ratinginput4.value = "4"
    ratinginput4.id = "rating3-4_"+index
    ratinginput4.name = "Rating_"+shortname
    ratinginput4.onchange = SetForRating4(shortname)
    const label4 = document.createElement("label")
    label4.setAttribute("for","rating3-4_"+index)
    label4.className = "mdi mdi-star"
    const ratinginput5= document.createElement("input")
    ratinginput5.type = "radio"
    ratinginput5.value = "5"
    ratinginput5.id = "rating3-5_"+index
    ratinginput5.name = "Rating_"+shortname
    ratinginput5.onchange = SetForRating5(shortname)
    const label5 = document.createElement("label")
    label5.setAttribute("for","rating3-5_"+index)
    label5.className = "mdi mdi-star"

    ratingcss.appendChild(ratinginput1)
    ratingcss.appendChild(label1)
    ratingcss.appendChild(ratinginput2)
    ratingcss.appendChild(label2)
    ratingcss.appendChild(ratinginput3)
    ratingcss.appendChild(label3)
    ratingcss.appendChild(ratinginput4)
    ratingcss.appendChild(label4)
    ratingcss.appendChild(ratinginput5)
    ratingcss.appendChild(label5)
//#endregion

/*     aContainer.setAttribute("data-tilt", "");
    aContainer.className = "logo"; */
    
    if (aContainer.addEventListener) {
      if (stat.isDirectory()) {
        aContainer.addEventListener("click", function () {
          launchDetect(path, root);
        });
      } else {
        aContainer.addEventListener("click", function () {
          ModifyJSONFile(
            CosmicComicsData + "/ListOfComics.json",
            "reading",
            true,
            shortname
            );
            ModifyJSONFile(
              CosmicComicsData + "/ListOfComics.json",
              "unread",
              false,
              shortname
              );
              ModifyJSONFileForPath(
                CosmicComicsData + "/config.json",
                "last_opened",
                path
                );
                window.location.href = "viewer.html?" + path;
              });
              aContainer.addEventListener("contextmenu", function (e) {
                e.preventDefault;
                RightClick(this, path);
              });
            }
          }
          n++;
          spanContainer.appendChild(node);
          const element = document.getElementById("ContainerExplorer");
          aContainer.appendChild(spanContainer);
          /*aContainer.classList.add("animate__animated", "animate__fadeInDown", "animate____delay-2s")*/
          const diva = document.createElement("div");
          diva.appendChild(aContainer)
          diva.appendChild(ratingcss);
          diva.style.textAlign = "center";
          diva.style.bottom = "0px";
          element.appendChild(diva);
        });
        preloadImage(listOfImages, n);
      }
      var preloadedImages = [];
      function preloadImage(listImages, n) {
  for (var i = 0; i < listImages.length; i++) {
    preloadedImages[i] = new Image();
    preloadedImages[i].src = listImages[i];
  }
  setTimeout(() => {
    LoadImages(n);
    loadTiltScript();
  }, 500);
}
function LoadImages(numberOf) {
  if (numberOf == 0) {
    Toastifycation(
      "The directory is empty or files are not supported",
      "#ff0000"
    );
    document.getElementById("overlay").style.display = "none";
    document.getElementById("tutotxt").innerHTML =
      "Looks like an empty directory, or the files in it are not supported";
    document.getElementById("tutotxt").style.display = "block";
    document.getElementById("tutotxt").style.fontSize = "24px";
  }
  for (let i = 0; i < numberOf; i++) {
    document.getElementById("tutotxt").style.display = "none";

    /* var elch = document.getElementById("id"+i).firstElementChild
    document.getElementById("id"+i).removeChild(elch) */
    document
      .getElementById("id" + i)
      .classList.add("animate__animated", "animate__fadeIn");
    try {
      document.getElementById("id" + i).style.backgroundImage =
        "url('" + listOfImages[i] + "')";
    } catch (error) {
      document.getElementById("id" + i).style.backgroundImage =
        "url('Images/fileDefault.png')";
    }
    document.getElementById("overlay").style.display = "none";
  }
}
function launchDetect(dir, root) {
  var parent = document.getElementById("ContainerExplorer");
  var parento = document.getElementById("controller");

  var child = parent.lastElementChild;
  while (child) {
    parent.removeChild(child);
    child = parent.lastElementChild;
  }

  if (dir != root) {
    const btn = document.getElementById("GotoRoot");
    if (btn.addEventListener) {
      btn.addEventListener("click", function () {
        /*btn.removeEventListener("click")*/
        launchDetect(root, root);
      });
    }
    const btnreturn = document.getElementById("gotoback");
    if (btnreturn.addEventListener) {
      btnreturn.addEventListener("click", function () {
        var adirname = patha.basename(dir);
        var backdir = dir.replace("/" + adirname, "");
        if (backdir == root) {
          /*btnreturn.removeEventListener("click",);*/
        }
        launchDetect(backdir, root);
      });
    }
  }

  var contents = DetectFilesAndFolders(dir);
  FolderResults = CheckCorrectExt4File(contents, ValidatedExtension);
  loadContents(FolderResults, root, favonly, readonly, unreadonly, readingonly);
}
//Detect files and folders in the current directory (not recursive)
function DetectFilesAndFolders(dir) {
  var result = [];
  fs.readdirSync(dir).forEach(function (file) {
    file = dir + "/" + file;
    var stat = fs.statSync(file);

    if (stat && stat.isDirectory()) {
      //result = result.concat(DetectFilesAndFolders(file))
      result = result.concat(file);
    } else {
      result.push(file);
    }
  });
  try {
    result.sort(SortingNumInStr);
  } catch (error) {
    console.log(error);
  }
  return result;
}
var SortingNumInStr = function (a, b) {
  return Number(a.match(/(\d+)/g)[0]) - Number(b.match(/(\d+)/g)[0]);
};

//Detect all folders and files in a directory (recursive)
function DetectAllFilesAndFolders(dir) {
  var result = [];

  fs.readdirSync(dir).forEach(function (file) {
    file = dir + "/" + file;
    var stat = fs.statSync(file);

    if (stat.isDirectory()) {
      var Deeper = DetectAllFilesAndFolders(file);
      result = result.concat(Deeper);
    } else {
      result.push(file);
    }
  });

  return result;
}
function loadTiltScript() {
  var script = document.createElement("script");
  script.src = "js/vanilla-tilt.js";
  script.type = "text/javascript";
  document.getElementsByTagName("body")[0].appendChild(script);
}

function GetTheFirstImageOfComicsByFolder(filesInFolder = [], i = 0) {
  document.getElementById("overlaymsg").innerHTML =
    "Extracting thumbnails " + i + " out of " + filesInFolder.length;
  if (i < filesInFolder.length) {
    CreateFIOAFolder();

    var name = patha.basename(filesInFolder[i]);
    ext = name.split(".").pop();
    name = name.split(".");
    name = name[0];
    var shortname = GetTheName(name);

    CreateFolder(shortname, CosmicComicsData + "/FirstImageOfAll");
    if (fs.existsSync(CosmicComicsData + "/FirstImageOfAll/" + shortname)) {
      if (
        fs.readdirSync(CosmicComicsData + "/FirstImageOfAll/" + shortname)
          .length == 0
      ) {
        UnZipFirst(
          filesInFolder[i],
          CosmicComicsData + "/FirstImageOfAll/" + shortname,
          shortname,
          ext,
          [
            "*000.jpg",
            "00.jpg",
            "00-copie.jpg",
            "*-00.jpg",
            "*000.png",
            "00.png",
            "00-copie.png",
            "*-00.png",
          ],
          i,
          filesInFolder
        );
      } else {
        GetTheFirstImageOfComicsByFolder(filesInFolder, i + 1);
      }
    } else {
      UnZipFirst(
        filesInFolder[i],
        CosmicComicsData + "/FirstImageOfAll/" + shortname,
        shortname,
        ext,
        [
          "*000.jpg",
          "00.jpg",
          "00-copie.jpg",
          "*-00.jpg",
          "*000.png",
          "00.png",
          "00-copie.png",
          "*-00.png",
        ],
        i,
        filesInFolder
      );
    }
  } else {
    GetAllIMG = true;
    document.getElementById("overlaymsg").innerHTML =
      language["overlaymsg_worst"];
  }
}
function hasNumbers(t) {
  var regex = /\d/g;
  return regex.test(t);
}
function GetTheName(CommonName = "") {
  CommonName = CommonName.replaceAll("-", " ");
  CommonName = CommonName.replaceAll(")", " ");
  CommonName = CommonName.replaceAll("(", " ");
  CommonName = CommonName.replaceAll("[", " ");
  CommonName = CommonName.replaceAll("]", " ");

  var s = CommonName.split(" ");
  var finalName = "";
  s.forEach((el) => {
    if (el != "") {
      if (hasNumbers(el)) {
        finalName += el;
      } else if (isNaN(parseInt(el))) {
        finalName += el[0];
      } else {
        finalName += el;
      }
    }
  });
  return finalName;
}
function CreateFIOAFolder() {
  if (!fs.existsSync(CosmicComicsData + "/FirstImageOfAll")) {
    fs.mkdirSync(CosmicComicsData + "/FirstImageOfAll");
  }
}
function CreateFolder(dirname, dirpath) {
  if (!fs.existsSync(dirpath + "/" + dirname)) {
    fs.mkdirSync(dirpath + "/" + dirname);
  }
}
function UnZipFirst(
  zipPath,
  ExtractDir,
  name,
  ext,
  listofelements,
  indice,
  filesInFolder
) {
  nn = 0;
  if (
    ext == "zip" ||
    ext == "cbz" ||
    ext == "7z" ||
    ext == "cb7" ||
    ext == "tar" ||
    ext == "cbt"
  ) {
    var fromfile = "";
    const Stream = Seven.extract(zipPath, ExtractDir, {
      recursive: true,
      $cherryPick: listofelements,
      $bin: Path27Zip,
    });
    Stream.on("data", function (data) {
      fromfile = data.file;
      console.log("DATA FROM UNZIP : " + fromfile);
      GetTheFirstImageOfComicsByFolder(filesInFolder, indice + 1);

      /*var instt = fs.createReadStream(ExtractDir + "/" + fromfile)
        var outstr = fs.createWriteStream(ExtractDir + "/" + name + "_0.jpg")
        instt.pipe(outstr)
        /*fs.renameSync(
          ExtractDir + "/" + fromfile,
          ExtractDir + "/" + name + "_0.jpg"
        );
        fs.unlinkSync(ExtractDir + "/" + fromfile);*/
    });
    Stream.on("end", function () {
      if (
        listofelements ==
        [
          "*001.jpg",
          "01.jpg",
          "01-copie.jpg",
          "*-01.jpg",
          "*001.png",
          "01.png",
          "01-copie.png",
          "*-01.png",
        ]
      ) {
        if (Stream.info.get("Files") == "0") {
          Toastifycation("Cover image not compatible for " + name, "#ff0000");
          GetTheFirstImageOfComicsByFolder(filesInFolder, indice + 1);
        }
      } else {
        if (Stream.info.get("Files") == "0") {
          UnZipFirst(
            zipPath,
            ExtractDir,
            name,
            ext,
            [
              "*001.jpg",
              "01.jpg",
              "01-copie.jpg",
              "*-01.jpg",
              "*001.png",
              "01.png",
              "01-copie.png",
              "*-01.png",
            ],
            indice,
            filesInFolder
          );
        }
      }
    });
    Stream.on("error", function (err) {
      console.log("Error: " + err);
    });
  }

  if (ext == "rar" || ext == "cbr") {
    if (process.platform == "win32") {
      var archive = new Unrar({
        path: zipPath,
        bin: CosmicComicsData + "/unrar_bin/UnRAR.exe",
      });
    } else if (process.platform == "linux") {
      var archive = new Unrar({
        path: zipPath,
      });
    } else if (process.platform == "darwin") {
      var archive = new Unrar({
        path: zipPath,
        bin: CosmicComicsData + "/unrar_bin/unrar",
      });
    }

    archive.list(function (err, entries) {
      entries.forEach((file) => {
        //if name contains 000.jpg or 001.jpg
        for (var i in file) {
          if (i == "name") {
            var currentName = file[i];
            currentName = currentName.toString();
            if (
              currentName.includes("000.jpg") ||
              currentName.includes("000a.jpg") ||
              currentName.includes("001.jpg") ||
              /*currentName.includes("01.jpg") ||
              currentName.includes("00.jpg") ||*/
              currentName.includes("acvr.jpg")
            ) {
              if (
                currentName.includes("000.jpg") ||
                currentName.includes("000a.jpg") ||
                currentName.includes("acvr.jpg")
              ) {
                nabc = 0;
              } else if (currentName.includes("001.jpg")) {
                nabc = 1;
              }
              var stream = archive.stream(currentName);
              stream.on("error", console.error);
              if (
                !fs.existsSync(ExtractDir + "/" + name + "_" + nabc + ".jpg")
              ) {
                stream.pipe(
                  fs.createWriteStream(
                    ExtractDir + "/" + name + "_" + nabc + ".jpg"
                  )
                );
                GetTheFirstImageOfComicsByFolder(filesInFolder, indice + 1);
              }
            }
          }
        }
      });
    });
  }
}
const menu = document.querySelector(".menu");
let menuVisible = false;

const toggleMenu = (command) => {
  menu.style.display = command === "show" ? "block" : "none";
  menuVisible = !menuVisible;
};

const setPosition = ({ top, left }) => {
  menu.style.left = `${left}px`;
  menu.style.top = `${top}px`;
  toggleMenu("show");
};

window.addEventListener("click", (e) => {
  if (menuVisible) toggleMenu("hide");
});
window.addEventListener("contextmenu", (e) => {
  e.preventDefault();
  const origin = {
    left: e.clientX,
    top: e.clientY,
  };
  setPosition(origin);
  return false;
});
function markasread() {
  if (whichname != "") {
    Toastifycation("Marked as Read (it will appear next time)", "#00C33C");

    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "reading",
      false,
      whichname
    );
    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "unread",
      false,
      whichname
    );
    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "read",
      true,
      whichname
    );
    whichname = "";
  }
}
function markasunread() {
  if (whichname != "") {
    Toastifycation("Marked as Unread (it will appear next time)", "#00C33C");

    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "reading",
      false,
      whichname
    );
    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "read",
      false,
      whichname
    );
    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "unread",
      true,
      whichname
    );
    whichname = "";
  }
}
function markasreading() {
  if (whichname != "") {
    Toastifycation("Marked as Reading (it will appear next time)", "#00C33C");

    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "reading",
      true,
      whichname
    );
    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "read",
      false,
      whichname
    );
    ModifyJSONFile(
      CosmicComicsData + "/ListOfComics.json",
      "unread",
      false,
      whichname
    );
    whichname = "";
  }
}
function favorite() {
  if (whichname != "") {
    var Info = GetInfoFromJSON(
      CosmicComicsData + "/ListOfComics.json",
      whichname
    );
    var favorite = GetElFromInfo("favorite", Info);
    if (favorite) {
      Toastifycation(
        "Removed from Favorite (it will appear next time)",
        "#00C33C"
      );

      ModifyJSONFile(
        CosmicComicsData + "/ListOfComics.json",
        "favorite",
        false,
        whichname
      );
    } else {
      Toastifycation("Added to Favorite (it will appear next time)", "#00C33C");
      ModifyJSONFile(
        CosmicComicsData + "/ListOfComics.json",
        "favorite",
        true,
        whichname
      );
    }
    whichname = "";
  }
}
function showOnlyFavT() {
  if (favonly == true) {
    favonly = false;
  } else {
    favonly = true;
  }
}
function showOnlyUnread() {
  unreadonly = true;
}
function showOnlyRead() {
  readonly = true;
}
function showOnlyReading() {
  readingonly = true;
}
function continuereading() {
  var configFile = fs.readFileSync(CosmicComicsData + "/config.json");
  var parsedJSON = JSON.parse(configFile);
  var path = GetElFromInforPath("last_opened", parsedJSON);
  window.location.href = "viewer.html?" + path;
}
function OpenFileOnce() {
  let result = remote.dialog.showOpenDialogSync({
    properties: ["openFile"],
  });
  window.location.href = "viewer.html?" + result[0];
}
function openBOOKM(path) {
  window.location.href = "viewer.html?" + path;
}
function listBM() {
  var data = fs.readFileSync(CosmicComicsData + "/bookmarks.json");
  var info = JSON.parse(data);
  console.log(info);
  info.forEach((file) => {
    if (file["bookmarked"] == true) {
      const btn = document.createElement("button");
      console.log(
        "openBOOKM('" + file["path"] + "&page=" + file["page"] + "');"
      );
      btn.addEventListener("click", function () {
        openBOOKM(file["path"] + "&page=" + file["page"]);
      });

      btn.className = "btn btn-primary";
      btn.style = "margin:5px";
      btn.innerHTML =
        file["name"] +
        " " +
        language["page"] +
        " " +
        (parseInt(file["page"]) + 1);
      document.getElementById("bookmarkContainer").appendChild(btn);
    }
  });
}
listBM();
new bootstrap.Tooltip(document.getElementById("menuid"), {
  title: language["menu"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("GotoRoot"), {
  title: language["go_root"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("gotoback"), {
  title: language["go_to_back"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("id_continuereading"), {
  title: language["continue_reading"],
  placement: "bottom",
});
document.getElementById("id_nav").innerHTML = language["menu"];
new bootstrap.Tooltip(document.getElementById("opnfld"), {
  title: language["open_folder"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("id_bm"), {
  title: language["show_bookmarks"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("id_forgetfolder"), {
  title: language["forget_folder"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("id_settings"), {
  title: language["settings"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("id_refreshFolder"), {
  title: language["refresh_folder"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("id_opnfile"), {
  title: language["open_file"],
  placement: "bottom",
});
new bootstrap.Tooltip(document.getElementById("id_info"), {
  title: language["info"],
  placement: "bottom",
});
document.getElementById("id_about").innerHTML = language["about"];
document.getElementById("createdby").innerHTML = language["createdby"];
document.getElementById("usewhat").innerHTML = language["technology_used"];
document.getElementById("seewhere").innerHTML = language["github_promoted"];
document.getElementById("project").innerHTML = language["license"];
document.getElementById("translated").innerHTML = language["translation"];
document.getElementById("id_bmm").innerHTML = language["bookmark_modal"];
document.getElementById("close_nav").innerHTML = language["close"];
document.getElementById("close_bm").innerHTML = language["close"];
document.getElementById("close_about").innerHTML = language["close"];
document.getElementById("close_settings").innerHTML = language["close"];
document.getElementById("id_settingsmod").innerHTML = language["settings"];
document.getElementById("languages").innerHTML = language["languages"];
document.getElementById("beta_test").innerHTML =
  language["betatest"] + document.getElementById("beta_test").innerHTML;

function getAvailableLanguages() {
  return fs.readdirSync(__dirname + "/languages");
}
function getFlags() {
  var lang = getAvailableLanguages();
  var flagslist = [];
  lang.forEach((language) => {
    var l = language.split(".");
    l = l[0];
    flagslist.push("https://flagcdn.com/h24/" + l + ".png");
  });
  return flagslist;
}

function insertFlags() {
  var flagslist = getFlags();
  console.log(flagslist);
  flagslist.forEach((flag) => {
    const flagI = document.createElement("img");
    const AContainer = document.createElement("a");
    var l = flag.split("h24/");
    l = l[1];
    l = l.split(".png");
    l = l[0];
    flagI.src = flag;
    flagI.style.width = "40px";
    flagI.style.height = "auto";

    AContainer.href = "#";
    AContainer.id = "id_lang" + l;

    AContainer.addEventListener("click", () => {
      changeLang(l);
    });
    AContainer.style.margin = "10px";
    AContainer.appendChild(flagI);
    document.getElementById("lang_container").appendChild(AContainer);
    new bootstrap.Tooltip(document.getElementById("id_lang" + l), {
      title: l,
      placement: "bottom",
    });
  });
}
function changeLang(langa) {
  ModifyJSONFileForPath(CosmicComicsData + "/config.json", "language", langa);
  window.location.reload();
}
insertFlags();
//save dans le config.json
function Toastifycation(message, BGColor = "#333", FrontColor = "#ffffff") {
  var x = document.getElementById("snackbar");

  x.className = "show";
  x.innerHTML = message;
  x.style.backgroundColor = BGColor;
  x.style.color = FrontColor;
  console.log(window.innerWidth + "<-k->" + x.offsetWidth);
  setTimeout(function () {
    x.className = x.className.replace("show", "");
  }, 3000);
}
function GetComicInfo() {
  if (whichpath != "") {
    Toastifycation("Launching the details page...", "#00C33C");

    window.location.href = "display.html?" + whichpath;
  }
}
document.addEventListener("drop", (event) => {
  event.preventDefault();
  event.stopPropagation();

  for (const f of event.dataTransfer.files) {
    // Using the path attribute to get absolute file path
    console.log("File Path of dragged files: ", f.path);
    if (
      f.path.includes(".cbz") ||
      f.path.includes(".cbr") ||
      f.path.includes(".cbt") ||
      f.path.includes(".cb7") ||
      f.path.includes(".zip") ||
      f.path.includes(".rar") ||
      f.path.includes(".7z") ||
      f.path.includes(".tar")
    ) {
      window.location.href = "viewer.html?" + f.path;
    } else {
      Toastifycation(
        "Drag and Drop Failed, maybe an incompatible file",
        "#ff0000"
      );
    }
  }
});

document.addEventListener("dragover", (e) => {
  e.preventDefault();
  e.stopPropagation();
});

document.addEventListener("dragenter", (event) => {
  console.log("File is in the Drop Space");
});

document.addEventListener("dragleave", (event) => {
  console.log("File has left the Drop Space");
});
function SetForRating1(name_of_book) {
  var rated = document.getElementsByName("Rating_"+name_of_book).forEach((rate) => {
    if (rate.checked) {
      ModifyJSONFile(
        CosmicComicsData + "/ListOfComics.json",
        "note",
        parseInt(rate.value),
        name_of_book
      );
    }
  });
}
function SetForRating2(name_of_book) {
  var rated = document.getElementsByName("Rating_"+name_of_book).forEach((rate) => {
    if (rate.checked) {
      ModifyJSONFile(
        CosmicComicsData + "/ListOfComics.json",
        "note",
        parseInt(rate.value),
        name_of_book
      );
    }
  });
}
function SetForRating3(name_of_book) {
  var rated = document.getElementsByName("Rating_"+name_of_book).forEach((rate) => {
    if (rate.checked) {
      ModifyJSONFile(
        CosmicComicsData + "/ListOfComics.json",
        "note",
        parseInt(rate.value),
        name_of_book
      );
    }
  });
}
function SetForRating4(name_of_book) {
  var rated = document.getElementsByName("Rating_"+name_of_book).forEach((rate) => {
    if (rate.checked) {
      ModifyJSONFile(
        CosmicComicsData + "/ListOfComics.json",
        "note",
        parseInt(rate.value),
        name_of_book
      );
    }
  });
}
function SetForRating5(name_of_book) {
  var rated = document.getElementsByName("Rating_"+name_of_book).forEach((rate) => {
    if (rate.checked) {
      ModifyJSONFile(
        CosmicComicsData + "/ListOfComics.json",
        "note",
       parseInt(rate.value),
        name_of_book
      );
    }
  });
}
var demoButtons;

function start () {
  
  // Add event "click" to "demo buttons"
  demoButtons = document.querySelectorAll ('.js-modify');
  for (var i = 0; i < demoButtons.length; i++) {
    demoButtons[i].addEventListener ('click', toggleEffect);
  }
  
  // Add event "click" to "save buttons"
  var favButtons = document.querySelectorAll ('.js-fav');
  for (var i = 0; i < saveButtons.length; i++) {
    saveButtons[i].addEventListener ('click', toggleActive);
  }
  
}

// Toggle "effect" classes
function toggleEffect () {
  var target = document.querySelector (this.dataset.target);
      target.dataset.effect = this.dataset.effect;
  
  for (var i= 0; i < demoButtons.length; i++) {
    demoButtons[i].classList.remove ('active');
  }
  
  toggleActive.call (this);
}

// Toggle "active" class
function toggleActive () {
  this.classList.toggle ('active');
}

// Invoke "start ()" function
window.addEventListener ('load', start);